#TESTING CASE IS USED FOR THE TEST OF ALL THE RANDOM TESTS AND CONSIDERING EDGE CASES 

#1) ARITHMETIC CASES
#- ADD
#- ADDI

#Edge Cases are test by using the overflow techniques

#Overfllow when adding
addi x2, x0, 12
lui x1, 0x0ffff
sra x3, x1, x2
lui x4, 0x7fff0
add x5, x4, x3 #Value of x5: 0x7fffffff
addi x6, x0, 1
add x7, x6, x5 #Value of x7: 0x80000000

#- SUB
#EdgeCases
#Overflow when subtracting

add x8, x7, x0 
add x8, x8, x8 #Expected value of x8: 0x00000000

# Test case in the Logic Operations is easy to be randomized
#- AND + ANDI
and x9, x5, x4 #Expected value of x9: 0x7fff0000
andi x10, x3, 0x0f0 #Expected value of x10: 0x000000f0

#- OR + ORI
or x11, x6, x7 #Expected value of x11: 0x80000001
ori x12, x8, 0x0f0 #Expected value of x12:0x00000f0

#- XOR + XORI
xor x13, x7, x6 #Expected value of x13: 0x80000001
xori x14, x4, 0xff0 #Expected value of x14: 0x8000fff0


#For Shift test, there are severals edge cases
#Shift Left
#edgeCases: Value becomes 0x00000000 or -2147483648 after shifting 31 bits
addi x15, x0, 31
sll x16, x6, x15 #Expected value of x16: 0x80000000
sll x17, x7, x6 #Expected value of x15: 0x00000000
sll x18, x14, x6 #Expected value of x16: 0x0001ffe0

#- shift right arithmetic
#edgeCases: Value becomes 0xffffffff or -1 after shifting equal 31 bits
sra x19, x14, x15 #Expected value of x19: 0xffffffff
sra x20, x12, x15 #Expected value of x20: 0x00000000

#LUI
lui x21, 0xDEADA
addi x21, x21, 0xABF #Expected value of x21: 0xdead9abf

#2) COMPARATOR TEST 
#CompareOperator
slt x22, x19, x18 #Expected value of x22: 0x00000001
slt x23, x19, x20 #Expected value of x23: 0x00000001
slt x24, x17, x20 #Expected value of x24: 0x00000000

#3) STORE and LOAD TEST
#Store Operator
#Use store byte operator to store byte at byte 1, 2, byte 3, and 4
sb x21, 0(x0) #Memory Value at Address 0x00000: 0x000000bf
sb x21, 5(x0) #Memory value at Address 0x00001: 0x0000bf00
sb x21, 10(x0) #Memory value at Address 0x00002: 0x00bf0000
sb x21, 15(x0) #Memory value at Address 0x0003: 0xbf000000

#Use store word operator to store word
sw x21, 16(x0) #Memory value at Address 0x0004: 0xdead9abf


#Load Operator
#Use Load byte to load byte at byte 1, byte 2, byte 3, and byte 4
lb x25, 1(x0)
lb x26, 5(x0)
lb x27, 10(x0)
lb x28, 15(x0)
#Value of x25, x26, x27 and x28: 0xffffffbf

#Use Load word
lw x29, 16(x0) #Value of x29: 0xdead9abf

#4) RANDOM TEST CASE (start at the beginning of all instructions)

#ADD/ ADDI/ SUB
addi x1, x0, 0x123 # Value of x1: 0x00000123
addi x2, x0, 0x456 # Value of x2: 0x00000456
add x3, x1, x2 # Value of x3: 0x00000579
sub x4, x3, x1 #Value of x4: 0x00000456

#LOGICAL OPERATIONS
and x5, x2, x3 #Value of x5: 0x00000450
andi x6, x1, 0x0f0 #Value of x6: 0x00000020
or x7, x2, x1 #Value of x7: 0x00000577
ori x8, x3, 0xcf0 #Value of x8:0xfffffdf9
xor x9, x7, x3 #Value of x9: 0x0000000e
xori x10, x3, 0xdef #Value of x10: 0xfffff896

#SHIFTING OPERATORS
addi x11, x0, 0x0ff #Value of x11:0x000000ff
addi x12, x0, 25 #Value of x12: 0x00000017
sll x13, x11, x12 #Value of x13: 0xfe000000
sll x14, x13, x12 #Value of x14: 0x00000000
addi x12, x0, 23
sra x15, x14, x12 #Value of x15: 0x00000000

#LUI OPERATORS
lui x16, 0x23233 
addi x16, x16, 0x501 #Value of x16: 0x23233501
lui x17, 0x9267 
addi x17, x17, 0x405 #Value of x17: 0x09267405 

#COMPARATOR
slt x18, x2, x3 #Value of x18: 0x00000001
slt x19, x1, x2 #Value of x19: 	0x00000001

#STORE + LOAD OPERATIONS
sb x17, 3(x0) 
sw x15, 4(x0)
lb x20, 6(x0)
lw x21, 8(x0)
# Memory Access Value is 0x05000000

